/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cn.edu.seu.iws.gspan;

import java.awt.Graphics;
import java.awt.Point;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.Objects;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import static oracle.jrockit.jfr.tools.ConCatRepository.usage;

/**
 *
 * @author Nguyen Chau
 * @author Le Tuan Dat
 */
public class MainFrame extends javax.swing.JFrame {

    private JFileChooser myFile;
    private ArrayList<ChildGraph> Graphs;
    private ArrayList<LtdGraph> LtdGraphs;
    private ArrayList<String> relationships;
    private ArrayList<String> names;
    private ArrayList<String> pictures;

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
        myFile = new JFileChooser();
        Graphs = new ArrayList<ChildGraph>();
        LtdGraphs = new ArrayList<LtdGraph>();
        relationships = new ArrayList<String>();
        names = new ArrayList<String>();
        pictures = new ArrayList<String>();
    }

    private void LoadResult() {
        /// Show graphs         
        List<Integer> diem = new ArrayList<Integer>();
        Point[] luudiem = new Point[50];
        for (int i = 0; i < luudiem.length; i++) {
            luudiem[i] = new Point(0, 0);
        }

        Graphics g;
        g = jPanel1.getGraphics();
        g.clearRect(0, 0, jPanel1.getWidth(), jPanel1.getWidth());
        MyGraphics g2d = new MyGraphics(g);

        if (LtdGraphs.size() >= 1) {
            for (LtdGraph graph : LtdGraphs) {
//                LtdGraph shortgraph = new LtdGraph(graph);
//                shortgraph.cleanshort(10);

                if (graph.Vertexs.size() < 15) {
                    for (LtdGraph.LtdGraphVertex Vertex : graph.Vertexs) {
                        diem.add(Vertex.id);
                        g2d.DrawPoint(luudiem, Vertex.id, names.get(Vertex.id), pictures.get(Vertex.id));
                    }

                    for (LtdGraph.LtdGraphEdgeMatrix edgeMatrix : graph.getEdgeMatrix()) {
                        String strlabel = "";
                        for (int label : edgeMatrix.labels) {
                            strlabel += ", " + relationships.get(label - 1);
                        }
                        strlabel = strlabel.substring(2, strlabel.length());
                        g2d.VeCanh(luudiem[edgeMatrix.from], luudiem[edgeMatrix.to], strlabel);
                    }
                } else {
                    g2d.DrawWarning();
                }
            }
        }
        ///JOptionPane.showMessageDialog(null, "Hiển thị đồ thị đầu vào thành công!", "Đồ thị đầu vào", JOptionPane.INFORMATION_MESSAGE);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnOpen = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtFile = new javax.swing.JTextField();
        btnHandling = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        txtFileOut = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtMinSup = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        btnReload = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel6 = new javax.swing.JLabel();
        txtEdges = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtVertexs = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtRelationships = new javax.swing.JTextField();
        btnReload1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Khai phá đồ thị");
        setResizable(false);

        btnOpen.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        btnOpen.setText("Open");
        btnOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOpenActionPerformed(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 500, Short.MAX_VALUE)
        );

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jLabel1.setText("File In:");

        txtFile.setEditable(false);
        txtFile.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N

        btnHandling.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        btnHandling.setText("Thực hiện tìm ma trận con");
        btnHandling.setEnabled(false);
        btnHandling.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHandlingActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jLabel2.setText("File Out:");

        txtFileOut.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        txtFileOut.setEnabled(false);

        jLabel3.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jLabel3.setText("Min Sup:");

        txtMinSup.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        txtMinSup.setText("80");
        txtMinSup.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        txtMinSup.setEnabled(false);

        jLabel4.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jLabel4.setText("%");

        btnReload.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnReload.setText("Auto View");
        btnReload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReloadActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jLabel6.setText("Số lượt quan hệ:");

        txtEdges.setEditable(false);
        txtEdges.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        txtEdges.setForeground(new java.awt.Color(153, 0, 0));

        jLabel7.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jLabel7.setText("Số đỉnh:");

        txtVertexs.setEditable(false);
        txtVertexs.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        txtVertexs.setForeground(new java.awt.Color(153, 0, 0));
        txtVertexs.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));

        jLabel8.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jLabel8.setText("Số loại quan hệ:");

        txtRelationships.setEditable(false);
        txtRelationships.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        txtRelationships.setForeground(new java.awt.Color(153, 0, 0));

        btnReload1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnReload1.setText("Best View");
        btnReload1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReload1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7))
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtEdges, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE)
                            .addComponent(txtVertexs))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtRelationships, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 77, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtMinSup, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel4))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtFileOut, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnHandling))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtFile, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnOpen)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnReload1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnReload))
                    .addComponent(jSeparator2)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(20, 20, 20))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnOpen)
                    .addComponent(btnReload)
                    .addComponent(btnReload1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(txtMinSup, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnHandling)
                            .addComponent(jLabel2)
                            .addComponent(txtFileOut, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(txtVertexs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(txtEdges, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8)
                            .addComponent(txtRelationships, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(19, 19, 19))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOpenActionPerformed
        Graphs.clear();
        LtdGraphs.clear();
        relationships.clear();
        names.clear();
        pictures.clear();

        jPanel1.repaint();

        JFileChooser openFile = new JFileChooser();
        FileFilter filter = new FileNameExtensionFilter("Text File", "txt");
        openFile.setFileFilter(filter);
        if (openFile.showOpenDialog(null) == 0) {
            this.myFile = openFile;
            txtMinSup.setEnabled(true);
            txtFileOut.setEnabled(true);
            btnHandling.setEnabled(true);
            txtFile.setText(openFile.getSelectedFile().getPath());

            File readfile = new File(openFile.getSelectedFile().getPath());

            List<Integer> diem = new ArrayList<Integer>();
            Point[] luudiem = new Point[50];
            for (int i = 0; i < luudiem.length; i++) {
                luudiem[i] = new Point(0, 0);
            }

            Graphics g;
            g = jPanel1.getGraphics();
            MyGraphics g2d = new MyGraphics(g);

            try {
                FileReader reader = new FileReader(readfile);
                BufferedReader buffer = new BufferedReader(reader);

                String readline;
                ArrayList<String> lines = new ArrayList<String>();

                while ((readline = buffer.readLine()) != null) {
                    lines.add(readline);
                }

                /// Read Relationships
                int index = 0;
                while (!("rrr".equals(lines.get(index)))) {
                    relationships.add(lines.get(index));
                    index++;
                }
                index++;
                txtRelationships.setText("" + relationships.size());

                /// Read Names
                while (!("nnn".equals(lines.get(index)))) {
                    names.add(lines.get(index));
                    index++;
                }
                index++;
                txtVertexs.setText("" + names.size());

                /// Read Pictures' Links
                while (!("ppp".equals(lines.get(index)))) {
                    pictures.add(lines.get(index));
                    index++;
                }
                index++;

                /// Save to Graphs
                ///index = 0;
                while (index < lines.size()) {
                    String line = lines.get(index);

                    if (line.charAt(0) != 't') {

                    } else /// line[0] == 't'
                    {
                        ChildGraph childGraph = new ChildGraph();
                        childGraph.t = line;
                        index++;

                        while ((index < lines.size()) && (lines.get(index).charAt(0) != 't')) {
                            if (lines.get(index).charAt(0) == 'v') {
                                childGraph.Points.add(lines.get(index));
                            }

                            if (lines.get(index).charAt(0) == 'e') {
                                childGraph.Vectors.add(lines.get(index));
                            }

                            index++;
                        }

                        if (!Graphs.contains(childGraph)) {
                            Graphs.add(childGraph);
                        }

                        index--;
                    }

                    index++;
                }

                /// Order graphs
                if (Graphs.size() >= 1) {
                    for (ChildGraph Graph : Graphs) {
                        Graph.sort();
                    }
                }

                /// Convert to LtdGraph
                for (ChildGraph graph : Graphs) {
                    LtdGraphs.add(new LtdGraph(graph));
                }

                LtdGraphs.get(0).showEdgeMatrix();

                /// Show graphs
                if (LtdGraphs.size() >= 1) {
                    for (LtdGraph graph : LtdGraphs) {
                        txtEdges.setText("" + graph.Edges.size());

//                        LtdGraph shortgraph = new LtdGraph(graph);
//                        shortgraph.cleanshort(10);
                        if (graph.Vertexs.size() < 15) {
                            int indexVertex = 0;
                            for (LtdGraph.LtdGraphVertex Vertex : graph.Vertexs) {
                                diem.add(Vertex.id);
                                ///g2d.DrawPoint(luudiem, Vertex.id, names.get(Vertex.id), pictures.get(Vertex.id));
                                g2d.DrawPointX(indexVertex, names.get(Vertex.id), pictures.get(Vertex.id));
                                indexVertex++;
                            }

                            for (LtdGraph.LtdGraphEdgeMatrix edgeMatrix : graph.getEdgeMatrix()) {
                                String strlabel = "";
                                for (int label : edgeMatrix.labels) {
                                    strlabel += ", " + relationships.get(label - 1);
                                }
                                strlabel = strlabel.substring(2, strlabel.length());
                                ///g2d.VeCanh(luudiem[edgeMatrix.from], luudiem[edgeMatrix.to], strlabel);
                                g2d.DrawEdgeXY(edgeMatrix.from, edgeMatrix.to, strlabel);
                            }
                        } else {
                            g2d.DrawWarning();
                        }

                    }
                }
                ///JOptionPane.showMessageDialog(null, "Hiển thị đồ thị đầu vào thành công!", "Đồ thị đầu vào", JOptionPane.INFORMATION_MESSAGE);
                txtFileOut.setText(txtFile.getText() + "_out.txt");
            } catch (FileNotFoundException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
    }//GEN-LAST:event_btnOpenActionPerformed

    private void btnHandlingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHandlingActionPerformed
        if (txtFileOut.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Bạn phải nhập tên File Out vào!");
        } else {
            int minsup = Integer.parseInt(txtMinSup.getText());
            int maxpat = 100000;
            int minnodes = 0;
            boolean directed = false;

            usage();

            File readfile = new File(txtFile.getText());
            File writefile = new File(txtFileOut.getText());
            FileReader reader;
            try {
                reader = new FileReader(readfile);
                FileWriter writer = new FileWriter(writefile);
                writer.flush();

                gSpan gspan = new gSpan();

                gspan.run(reader, writer, minsup, maxpat, minnodes, directed);

                CleanFile(writefile);

                JOptionPane.showMessageDialog(null, "Đã lưu kết quả vào file " + txtFileOut.getText());

                ///ChildResultFrame frmResult = new ChildResultFrame(writefile.getAbsoluteFile());
                ///frmResult.show();
                SingleGraphFrame frmResults = new SingleGraphFrame(writefile.getAbsoluteFile());
                frmResults.show();
            } catch (Exception ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
    }//GEN-LAST:event_btnHandlingActionPerformed

    private void btnReloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReloadActionPerformed
        LoadResult();

    }//GEN-LAST:event_btnReloadActionPerformed

    private void btnReload1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReload1ActionPerformed
        // TODO add your handling code here:
        LoadBestView();
    }//GEN-LAST:event_btnReload1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnHandling;
    private javax.swing.JButton btnOpen;
    private javax.swing.JButton btnReload;
    private javax.swing.JButton btnReload1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTextField txtEdges;
    private javax.swing.JTextField txtFile;
    private javax.swing.JTextField txtFileOut;
    private javax.swing.JTextField txtMinSup;
    private javax.swing.JTextField txtRelationships;
    private javax.swing.JTextField txtVertexs;
    // End of variables declaration//GEN-END:variables

    private void CleanFile(File writefile) {
        ArrayList<String> lines = new ArrayList<String>();
        ArrayList<ChildGraph> Graphs = new ArrayList<ChildGraph>();

        /// Read file
        try {
            FileReader reader = new FileReader(writefile);
            BufferedReader read = new BufferedReader(reader);

            String readgraph;

            while ((readgraph = read.readLine()) != null) {
                lines.add(readgraph);

            }
        } catch (Exception e) {

        }

        /// Handling
        int index = 0;

        while (index < lines.size()) {
            String line = lines.get(index);

            if (line.charAt(0) != 't') {

            } else /// line[0] == 't'
            {
                ChildGraph childGraph = new ChildGraph();
                index++;

                while ((index < lines.size()) && (lines.get(index).charAt(0) != 't')) {
                    if (lines.get(index).charAt(0) == 'v') {
                        childGraph.Points.add(lines.get(index));
                    }

                    if (lines.get(index).charAt(0) == 'e') {
                        childGraph.Vectors.add(lines.get(index));
                    }

                    index++;
                }

                if (!Graphs.contains(childGraph)) {
                    Graphs.add(childGraph);
                }

                index--;
            }

            index++;
        }

        index = 0;
        for (ChildGraph graph : Graphs) {
            graph.t = "t # " + index + " * 1";
            index++;
        }

        /// Write file
        try {
            FileWriter writer = new FileWriter(writefile);
            BufferedWriter write = new BufferedWriter(writer);

            for (String relation : relationships) {
                write.write(relation + "\r\n");
            }
            write.write("rrr" + "\r\n");

            for (String name : names) {
                write.write(name + "\r\n");
            }
            write.write("nnn" + "\r\n");

            for (String picture : pictures) {
                write.write(picture + "\r\n");
            }
            write.write("ppp" + "\r\n");

            for (ChildGraph Graph : Graphs) {
                write.write(Graph.t + "\r\n");
                for (String Point : Graph.Points) {
                    write.write(Point + "\r\n");
                }
                for (String Vector : Graph.Vectors) {
                    write.write(Vector + "\r\n");
                }
            }
            write.close();
            System.out.println("Writen!");
        } catch (Exception e) {

        }
    }

    private void LoadBestView() {
        List<Integer> diem = new ArrayList<Integer>();
        Point[] luudiem = new Point[50];
        for (int i = 0; i < luudiem.length; i++) {
            luudiem[i] = new Point(0, 0);
        }

        Graphics g;
        g = jPanel1.getGraphics();
        g.clearRect(0, 0, jPanel1.getWidth(), jPanel1.getWidth());
        MyGraphics g2d = new MyGraphics(g);

        if (LtdGraphs.size() >= 1) {
            for (LtdGraph graph : LtdGraphs) {
                txtEdges.setText("" + graph.Edges.size());

//                        LtdGraph shortgraph = new LtdGraph(graph);
//                        shortgraph.cleanshort(10);
                if (graph.Vertexs.size() < 15) {
                    int indexVertex = 0;
                    for (LtdGraph.LtdGraphVertex Vertex : graph.Vertexs) {
                        diem.add(Vertex.id);
                        ///g2d.DrawPoint(luudiem, Vertex.id, names.get(Vertex.id), pictures.get(Vertex.id));
                        g2d.DrawPointX(indexVertex, names.get(Vertex.id), pictures.get(Vertex.id));
                        indexVertex++;
                    }

                    for (LtdGraph.LtdGraphEdgeMatrix edgeMatrix : graph.getEdgeMatrix()) {
                        String strlabel = "";
                        for (int label : edgeMatrix.labels) {
                            strlabel += ", " + relationships.get(label - 1);
                        }
                        strlabel = strlabel.substring(2, strlabel.length());
                        ///g2d.VeCanh(luudiem[edgeMatrix.from], luudiem[edgeMatrix.to], strlabel);
                        g2d.DrawEdgeXY(edgeMatrix.from, edgeMatrix.to, strlabel);
                    }
                } else {
                    g2d.DrawWarning();
                }

            }
        }
    }
}
