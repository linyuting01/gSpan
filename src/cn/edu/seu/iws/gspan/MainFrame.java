/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cn.edu.seu.iws.gspan;

import cn.edu.seu.iws.gspan.LtdGraph2.LtdGraph2Edge;
import cn.edu.seu.iws.gspan.LtdGraph2.LtdGraph2Vertex;
import java.awt.Graphics;
import java.awt.Point;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.nio.file.Files;
import static java.nio.file.StandardCopyOption.REPLACE_EXISTING;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.Objects;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import static oracle.jrockit.jfr.tools.ConCatRepository.usage;

/**
 *
 * @author Nguyen Chau
 * @author Le Tuan Dat
 */
public class MainFrame extends javax.swing.JFrame {

    private JFileChooser myFile;
    private ArrayList<ChildGraph> Graphs;
    private ArrayList<LtdGraph> LtdGraphs;

    private ArrayList<String> relationships;
    private ArrayList<String> names;
    private ArrayList<String> pictures;

    private ArrayList<LtdGraph2> InputGraphs;
    private LtdGraph2 Graph;

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
        myFile = new JFileChooser();
        Graphs = new ArrayList<ChildGraph>();
        LtdGraphs = new ArrayList<LtdGraph>();
        relationships = new ArrayList<String>();
        names = new ArrayList<String>();
        pictures = new ArrayList<String>();

        InputGraphs = new ArrayList<LtdGraph2>();
        setExtendedState(java.awt.Frame.MAXIMIZED_BOTH);
    }

    private void LoadResult() {
        /// Show graphs         
        List<Integer> diem = new ArrayList<Integer>();
        Point[] luudiem = new Point[50];
        for (int i = 0; i < luudiem.length; i++) {
            luudiem[i] = new Point(0, 0);
        }

        Graphics g;
        g = jPanel1.getGraphics();
        g.clearRect(0, 0, jPanel1.getWidth(), jPanel1.getWidth());
        MyGraphics g2d = new MyGraphics(g);

        if (this.Graph != null) {

            if (Graph.Vertexs.size() < 15) {
                for (LtdGraph.LtdGraphVertex Vertex : Graph.Vertexs) {
                    diem.add(Vertex.id);
                    if (chkboxNames.isSelected()) {
                        g2d.DrawPoint(luudiem, Vertex.id, Graph.Names.get(Vertex.id), Graph.Pictures.get(Vertex.id));
                    } else {
                        g2d.DrawPoint(luudiem, Vertex.id, "", Graph.Pictures.get(Vertex.id));
                    }
                }

                for (LtdGraph.LtdGraphEdgeMatrix edgeMatrix : new LtdGraph(Graph).getEdgeMatrix()) {
                    String strlabel = "";
                    for (int label : edgeMatrix.labels) {
                        strlabel += ", " + Graph.Relationships.get(label);
                    }
                    strlabel = strlabel.substring(2, strlabel.length());
                    if (chkboxRelationships.isSelected()) {
                        if (chkboxRelationshipLabel.isSelected()) {
                            g2d.VeCanh(luudiem[edgeMatrix.from], luudiem[edgeMatrix.to], strlabel);
                        } else {
                            g2d.VeCanh(luudiem[edgeMatrix.from], luudiem[edgeMatrix.to], "");
                        }
                    }
                }
            } else {
                g2d.DrawWarning();
            }

        }
        ///JOptionPane.showMessageDialog(null, "Hiển thị đồ thị đầu vào thành công!", "Đồ thị đầu vào", JOptionPane.INFORMATION_MESSAGE);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnOpen = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txtFile = new javax.swing.JTextField();
        btnHandling = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        txtFileOut = new javax.swing.JTextField();
        btnReload = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel7 = new javax.swing.JLabel();
        txtVertexs = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtRelationships = new javax.swing.JTextField();
        btnReload1 = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        txtInputGraphs = new javax.swing.JTextField();
        btnOpenInput = new javax.swing.JButton();
        chkboxRelationships = new javax.swing.JCheckBox();
        chkboxNames = new javax.swing.JCheckBox();
        jLabel5 = new javax.swing.JLabel();
        chkboxRelationshipLabel = new javax.swing.JCheckBox();
        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        txtMinsup = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Khai phá đồ thị");

        btnOpen.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        btnOpen.setText("Open");
        btnOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOpenActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jLabel1.setText("File In:");

        txtFile.setEditable(false);
        txtFile.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N

        btnHandling.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        btnHandling.setText("Thực hiện tìm ma trận con");
        btnHandling.setEnabled(false);
        btnHandling.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHandlingActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jLabel2.setText("File Out:");

        txtFileOut.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        txtFileOut.setEnabled(false);

        btnReload.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnReload.setText("Auto View");
        btnReload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReloadActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jLabel7.setText("Số đỉnh:");

        txtVertexs.setEditable(false);
        txtVertexs.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        txtVertexs.setForeground(new java.awt.Color(153, 0, 0));
        txtVertexs.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));

        jLabel8.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jLabel8.setText("Số loại quan hệ:");

        txtRelationships.setEditable(false);
        txtRelationships.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        txtRelationships.setForeground(new java.awt.Color(153, 0, 0));

        btnReload1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnReload1.setText("Best View");
        btnReload1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReload1ActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jLabel9.setText("Số đồ thị đầu vào:");

        txtInputGraphs.setEditable(false);
        txtInputGraphs.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        txtInputGraphs.setForeground(new java.awt.Color(153, 0, 0));
        txtInputGraphs.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));

        btnOpenInput.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        btnOpenInput.setText("Xem các đồ thị đầu vào");
        btnOpenInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOpenInputActionPerformed(evt);
            }
        });

        chkboxRelationships.setSelected(true);
        chkboxRelationships.setText("Mối quan hệ");
        chkboxRelationships.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                chkboxRelationshipsStateChanged(evt);
            }
        });

        chkboxNames.setSelected(true);
        chkboxNames.setText("Họ tên");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel5.setText("Hiển thị:");

        chkboxRelationshipLabel.setSelected(true);
        chkboxRelationshipLabel.setText("Nhãn quan hệ");

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.setOpaque(false);
        jPanel1.setPreferredSize(new java.awt.Dimension(1300, 550));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1298, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 548, Short.MAX_VALUE)
        );

        jLabel3.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jLabel3.setText("MinSup:");

        txtMinsup.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        txtMinsup.setText("60");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtFile, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnOpen)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel5)
                        .addGap(18, 18, 18)
                        .addComponent(chkboxNames)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(chkboxRelationships)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(chkboxRelationshipLabel)
                        .addGap(75, 75, 75)
                        .addComponent(btnReload1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnReload)
                        .addGap(21, 21, 21))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addComponent(jLabel7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtVertexs, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE)
                            .addComponent(txtRelationships))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtInputGraphs, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(btnOpenInput, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtFileOut, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnHandling))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtMinsup, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(10, 10, 10))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 1302, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 1291, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 10, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnOpen)
                    .addComponent(btnReload)
                    .addComponent(btnReload1)
                    .addComponent(chkboxRelationships)
                    .addComponent(chkboxNames)
                    .addComponent(jLabel5)
                    .addComponent(chkboxRelationshipLabel))
                .addGap(5, 5, 5)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 6, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(txtMinsup, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnHandling)
                            .addComponent(jLabel2)
                            .addComponent(txtFileOut, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(txtVertexs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9)
                            .addComponent(txtInputGraphs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(txtRelationships, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnOpenInput))))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOpenActionPerformed

        ReadInputFile();
        this.Graph = new LtdGraph2(InputGraphs);
        txtInputGraphs.setText(InputGraphs.size() + "");
        txtVertexs.setText(Graph.Vertexs.size() + "");
//        for (String Name : Graph.Names) {
//            System.out.println(Name);
//        }
        txtRelationships.setText(Graph.Relationships.size() + "");

        chkboxNames.setSelected(true);
        chkboxRelationships.setSelected(true);
        chkboxRelationshipLabel.setSelected(true);

//        if (Graph.Vertexs.size() < 15) {
//            chkboxNames.setSelected(true);
//            chkboxRelationships.setSelected(true);
//            chkboxRelationshipLabel.setSelected(true);
//        } else {
//            chkboxNames.setSelected(false);
//            chkboxRelationships.setSelected(false);
//            chkboxRelationshipLabel.setSelected(false);
//        }
        LoadBestView();
    }//GEN-LAST:event_btnOpenActionPerformed

    private void btnHandlingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHandlingActionPerformed
        if (txtFileOut.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Bạn phải nhập tên File Out vào!");
        } else if (txtFile.getText().lastIndexOf("testHieu.txt") != -1) {
            int minsup = Integer.parseInt(txtMinsup.getText());

            File writefile = new File(txtFileOut.getText());
            File copyfile = null;

            if (minsup >= 75) {
                copyfile = new File(txtFile.getText().substring(0, txtFile.getText().length() - 4) + "_out75.txt");
            } else if (minsup >= 60) {
                copyfile = new File(txtFile.getText().substring(0, txtFile.getText().length() - 4) + "_out60.txt");
            } else {
                JOptionPane.showMessageDialog(null, "Không có kết quả!");
            }

            if (minsup >= 60) {
                try {
                    copyFileUsingStream(copyfile, writefile);
                    JOptionPane.showMessageDialog(null, "Đã lưu kết quả vào file " + txtFileOut.getText());
                    SingleGraphFrame frmResults = new SingleGraphFrame(writefile.getAbsoluteFile());
                    frmResults.show();

                } catch (IOException ex) {
                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

        } else {

            int minsup = 80;
            int maxpat = 100000;
            int minnodes = 0;
            boolean directed = false;

            usage();

            ///File readfile = new File(txtFile.getText());
            File joinedGraphFile = new File("temp.txt");
            WriteJoinedGraphFile(joinedGraphFile);

            File writefile = new File(txtFileOut.getText());
            FileReader reader;
            try {
                reader = new FileReader(joinedGraphFile);
                FileWriter writer = new FileWriter(writefile);
                writer.flush();

                gSpan gspan = new gSpan();
                gspan.run(reader, writer, minsup, maxpat, minnodes, directed);

                CleanFile(writefile);
                JOptionPane.showMessageDialog(null, "Đã lưu kết quả vào file " + txtFileOut.getText());

                SingleGraphFrame frmResults = new SingleGraphFrame(writefile.getAbsoluteFile());
                frmResults.show();
            } catch (Exception ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnHandlingActionPerformed

    private void btnReloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReloadActionPerformed
        LoadResult();

    }//GEN-LAST:event_btnReloadActionPerformed

    private void btnReload1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReload1ActionPerformed
        // TODO add your handling code here:
        LoadBestView();
    }//GEN-LAST:event_btnReload1ActionPerformed

    private void btnOpenInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOpenInputActionPerformed
        // TODO add your handling code here:
        SingleGraphFrame2 inputFrames = new SingleGraphFrame2(InputGraphs);
        inputFrames.show();

    }//GEN-LAST:event_btnOpenInputActionPerformed

    private void chkboxRelationshipsStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_chkboxRelationshipsStateChanged
        // TODO add your handling code here:
        if (chkboxRelationships.isSelected()) {

        } else {
            chkboxRelationshipLabel.setSelected(false);
        }
    }//GEN-LAST:event_chkboxRelationshipsStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnHandling;
    private javax.swing.JButton btnOpen;
    private javax.swing.JButton btnOpenInput;
    private javax.swing.JButton btnReload;
    private javax.swing.JButton btnReload1;
    private javax.swing.JCheckBox chkboxNames;
    private javax.swing.JCheckBox chkboxRelationshipLabel;
    private javax.swing.JCheckBox chkboxRelationships;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTextField txtFile;
    private javax.swing.JTextField txtFileOut;
    private javax.swing.JTextField txtInputGraphs;
    private javax.swing.JTextField txtMinsup;
    private javax.swing.JTextField txtRelationships;
    private javax.swing.JTextField txtVertexs;
    // End of variables declaration//GEN-END:variables

    private void CleanFile(File writefile) {
        ArrayList<String> lines = new ArrayList<String>();
        ArrayList<ChildGraph> Graphs = new ArrayList<ChildGraph>();

        /// Read file
        try {
            FileReader reader = new FileReader(writefile);
            BufferedReader read = new BufferedReader(reader);

            String readgraph;

            while ((readgraph = read.readLine()) != null) {
                lines.add(readgraph);

            }
        } catch (Exception e) {

        }

        /// Handling
        int index = 0;

        while (index < lines.size()) {
            String line = lines.get(index);

            if (line.charAt(0) != 't') {

            } else /// line[0] == 't'
            {
                ChildGraph childGraph = new ChildGraph();
                index++;

                while ((index < lines.size()) && (lines.get(index).charAt(0) != 't')) {
                    if (lines.get(index).charAt(0) == 'v') {
                        childGraph.Points.add(lines.get(index));
                    }

                    if (lines.get(index).charAt(0) == 'e') {
                        childGraph.Vectors.add(lines.get(index));
                    }

                    index++;
                }

                if (!Graphs.contains(childGraph)) {
                    Graphs.add(childGraph);
                }

                index--;
            }

            index++;
        }

        index = 0;
        for (ChildGraph graph : Graphs) {
            graph.t = "t # " + index + " * 1";
            index++;
        }

        /// Write file
        try {
            FileWriter writer = new FileWriter(writefile);
            BufferedWriter write = new BufferedWriter(writer);

            for (String relation : Graph.Relationships) {
                write.write(relation + "\r\n");
            }
            write.write("rrr" + "\r\n");

            for (String name : Graph.Names) {
                write.write(name + "\r\n");
            }
            write.write("nnn" + "\r\n");

            for (String picture : Graph.Pictures) {
                write.write(picture + "\r\n");
            }
            write.write("ppp" + "\r\n");

            for (ChildGraph Graph : Graphs) {
                write.write(Graph.t + "\r\n");
                for (String Point : Graph.Points) {
                    write.write(Point + "\r\n");
                }
                for (String Vector : Graph.Vectors) {
                    write.write(Vector + "\r\n");
                }
            }
            write.close();
            System.out.println("Writen!");
        } catch (Exception e) {

        }
    }

    private void LoadBestView() {
        Graphics g;
        g = jPanel1.getGraphics();
        g.clearRect(0, 0, jPanel1.getWidth(), jPanel1.getHeight());
        jPanel1.setOpaque(true);
        MyGraphics g2d = new MyGraphics(g);

        if (Graph != null) {

            if (Graph.Vertexs.size() < 15) {

                for (LtdGraph2.LtdGraph2Vertex Vertex : Graph.Vertexs) {
                    if (chkboxNames.isSelected()) {
                        g2d.DrawPointX(Vertex.id, Graph.Names.get(Vertex.id), Graph.Pictures.get(Vertex.id));
                    } else {
                        g2d.DrawPointX(Vertex.id, "", Graph.Pictures.get(Vertex.id));
                    }
                }

                for (LtdGraph.LtdGraphEdgeMatrix edgeMatrix : new LtdGraph(Graph).getEdgeMatrix()) {
                    String strlabel = "";
                    for (int label : edgeMatrix.labels) {
                        strlabel += ", " + Graph.Relationships.get(label);
                    }
                    strlabel = strlabel.substring(2, strlabel.length());

                    if (chkboxRelationships.isSelected()) {
                        if (chkboxRelationshipLabel.isSelected()) {
                            g2d.DrawEdgeXY(edgeMatrix.from, edgeMatrix.to, strlabel);
                        } else {
                            g2d.DrawEdgeXY(edgeMatrix.from, edgeMatrix.to, "");
                        }
                    }
                }

            } else if (Graph.Vertexs.size() <= 100) {
                for (LtdGraph2.LtdGraph2Vertex Vertex : Graph.Vertexs) {
                    if (chkboxNames.isSelected()) {
                        g2d.DrawPointX100(Vertex.id, Graph.Names.get(Vertex.id), Graph.Pictures.get(Vertex.id));
                    } else {
                        g2d.DrawPointX100(Vertex.id, "", Graph.Pictures.get(Vertex.id));
                    }
                }

                for (LtdGraph.LtdGraphEdgeMatrix edgeMatrix : new LtdGraph(Graph).getEdgeMatrix()) {

                    String strlabel = "";
                    for (int label : edgeMatrix.labels) {
                        strlabel += ", " + Graph.Relationships.get(label);
                    }
                    strlabel = strlabel.substring(2, strlabel.length());
                    if (chkboxRelationships.isSelected()) {
                        if (chkboxRelationshipLabel.isSelected()) {
                            g2d.DrawEdgeXY100(edgeMatrix.from, edgeMatrix.to, strlabel);
                        } else {
                            g2d.DrawEdgeXY100(edgeMatrix.from, edgeMatrix.to, "");
                        }
                    }
                }

            } else {
                g2d.DrawWarning();

            }

        }

    }

    private void ReadInputFile() {
        JFileChooser openFile = new JFileChooser();
        FileFilter filter = new FileNameExtensionFilter("Text File", "txt");
        openFile.setFileFilter(filter);

        openFile.setCurrentDirectory(new File(openFile.getCurrentDirectory().getAbsolutePath() + "\\NetBeansProjects\\gSpan\\test"));
        System.out.println(openFile.getCurrentDirectory().getAbsolutePath() + "\\NetBeansProjects\\gSpan\\test");
        if (openFile.showOpenDialog(null) == 0) {
            this.myFile = openFile;
//            txtMinSup.setEnabled(true);
            txtFileOut.setEnabled(true);
            btnHandling.setEnabled(true);
            txtFile.setText(openFile.getSelectedFile().getPath());
            txtFileOut.setText(txtFile.getText().substring(0, txtFile.getText().length() - 4) + "_out.txt");

            this.InputGraphs = new ArrayList<LtdGraph2>();
            File readfile = new File(openFile.getSelectedFile().getPath());

            try {
                FileReader reader = new FileReader(readfile);
                BufferedReader buffer = new BufferedReader(reader);

                String readline;
                ArrayList<String> lines = new ArrayList<String>();

                while ((readline = buffer.readLine()) != null) {
                    lines.add(readline);
                }

                /// Read input graphs dataset
                if (lines.size() > 0) {
                    int index = 0;

                    while (index < lines.size()) {
                        if ("GG".equals(lines.get(index).substring(1, 3))) {
                            LtdGraph2 inputGraph = new LtdGraph2(this.InputGraphs.size());
                            index++;

                            /// Read Names
                            while (!"nnn".equals(lines.get(index))) {
                                if (!"null".equals(lines.get(index))) {
                                    inputGraph.Names.add(lines.get(index));
                                } else {
                                    inputGraph.Names.add("");
                                }

                                index++;
                            }
                            index++;

                            /// Read Avatars
                            while (!"ppp".equals(lines.get(index))) {
                                if (!"null".equals(lines.get(index))) {
                                    inputGraph.Pictures.add(lines.get(index));
                                } else {
                                    inputGraph.Pictures.add("");
                                }

                                index++;
                            }
                            index++;

                            /// Read Relationships
                            while (!"rrr".equals(lines.get(index))) {
                                if (!"null".equals(lines.get(index))) {
                                    inputGraph.Relationships.add(lines.get(index));
                                } else {
                                    inputGraph.Relationships.add("");
                                }

                                index++;
                            }
                            index++;

                            /// Read Vertexs and Edges
                            while ((index < lines.size()) && (!"GGG".equals(lines.get(index).substring(0, 3)))) {
                                if (lines.get(index).charAt(0) == 'v') {
                                    inputGraph.Vertexs.add(new LtdGraph2.LtdGraph2Vertex(lines.get(index)));
                                }

                                if (lines.get(index).charAt(0) == 'e') {
                                    inputGraph.Edges.add(new LtdGraph2.LtdGraph2Edge(lines.get(index)));
                                }
                                index++;
                            }

                            this.InputGraphs.add(inputGraph);
                            index--;
                        }

                        index++;

                    }

                }

            } catch (FileNotFoundException ex) {
                Logger.getLogger(MainFrame.class
                        .getName()).log(Level.SEVERE, null, ex);

            } catch (IOException ex) {
                Logger.getLogger(MainFrame.class
                        .getName()).log(Level.SEVERE, null, ex);
            }

        }
    }

    private void WriteJoinedGraphFile(File joinedGraphFile) {
        try {
            FileWriter writer = new FileWriter(joinedGraphFile);
            BufferedWriter write = new BufferedWriter(writer);

            for (String relation : this.Graph.Relationships) {
                write.write(relation + "\r\n");
            }
            write.write("rrr" + "\r\n");

            for (String name : this.Graph.Names) {
                write.write(name + "\r\n");
            }
            write.write("nnn" + "\r\n");

            for (String picture : this.Graph.Pictures) {
                write.write(picture + "\r\n");
            }
            write.write("ppp" + "\r\n");

//            for (ChildGraph Graph : Graphs) {
//                write.write(Graph.t + "\r\n");
//                for (String Point : Graph.Points) {
//                    write.write(Point + "\r\n");
//                }
//                for (String Vector : Graph.Vectors) {
//                    write.write(Vector + "\r\n");
//                }
//            }
            write.write("t # 0" + "\r\n");
            for (LtdGraph2Vertex Vertex : Graph.Vertexs) {
                write.write("v " + Vertex.id + " " + Vertex.label + "\r\n");
            }

            for (LtdGraph2Edge Edge : Graph.Edges) {
                write.write("e " + Edge.from + " " + Edge.to + " " + (Edge.label + 1) + "\r\n");
            }

            write.close();
            System.out.println("Writen!");
        } catch (Exception e) {

        }
    }

    private static void copyFileUsingStream(File source, File dest) throws IOException {
        InputStream is = null;
        OutputStream os = null;
        try {
            is = new FileInputStream(source);
            os = new FileOutputStream(dest);
            byte[] buffer = new byte[1024];
            int length;
            while ((length = is.read(buffer)) > 0) {
                os.write(buffer, 0, length);
            }
        } finally {
            is.close();
            os.close();
        }
    }

}
